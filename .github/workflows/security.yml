# Security Scanning Workflow - AT&T CMIT DevSecOps
#
# Este workflow ejecuta múltiples herramientas de análisis de seguridad
# para detectar vulnerabilidades, secretos y problemas de compliance.

name: Security Scan

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Ejecutar análisis de seguridad diario a las 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - secrets
          - dependencies
          - code
          - containers

# Configuración de concurrencia
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Variables de entorno globales
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ==========================================================================
  # JOB: SECRET SCANNING
  # ==========================================================================
  secrets-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'secrets' || github.event.inputs.scan_type == ''

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for comprehensive scanning

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified --json --output=trufflehog-results.json

      - name: Run detect-secrets
        run: |
          pip install detect-secrets
          detect-secrets scan --all-files \
            --force-use-all-plugins \
            --exclude-files '.*\.lock$' \
            --exclude-files 'node_modules/.*' \
            --exclude-files '\.git/.*' \
            --output detect-secrets-results.json

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
        with:
          config-path: .gitleaks.toml

      - name: Process secret scan results
        if: always()
        run: |
          # Crear reporte consolidado de secretos
          python scripts/security/consolidate-secret-reports.py \
            --trufflehog trufflehog-results.json \
            --detect-secrets detect-secrets-results.json \
            --gitleaks gitleaks-report.json \
            --output consolidated-secrets-report.json

      - name: Upload secret scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: secret-scan-results
          path: |
            trufflehog-results.json
            detect-secrets-results.json
            gitleaks-report.json
            consolidated-secrets-report.json
  # ==========================================================================
  # JOB: CONTAINER SECURITY SCANNING
  # ==========================================================================
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'containers' || github.event.inputs.scan_type == ''
    needs: []

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:scan .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:scan
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'json'
          output: 'trivy-fs-results.json'

      - name: Run Hadolint Dockerfile scan
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          format: json
          output-file: hadolint-results.json
          no-fail: true

      - name: Run Docker Bench Security
        run: |
          docker run --rm --net host --pid host --userns host --cap-add audit_control \
            -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \
            -v /etc:/etc:ro \
            -v /usr/bin/containerd:/usr/bin/containerd:ro \
            -v /usr/bin/runc:/usr/bin/runc:ro \
            -v /usr/lib/systemd:/usr/lib/systemd:ro \
            -v /var/lib:/var/lib:ro \
            -v /var/run/docker.sock:/var/run/docker.sock:ro \
            --label docker_bench_security \
            docker/docker-bench-security > docker-bench-results.txt

      - name: Upload container scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: container-scan-results
          path: |
            trivy-results.sarif
            trivy-fs-results.json
            hadolint-results.json
            docker-bench-results.txt
          retention-days: 30

  # ==========================================================================
  # JOB: INFRASTRUCTURE SECURITY SCANNING
  # ==========================================================================
  infrastructure-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'code' || github.event.inputs.scan_type == ''

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          format: json
          soft_fail: true

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: infrastructure/
          framework: terraform,kubernetes,dockerfile
          output_format: json
          output_file_path: checkov-results.json
          soft_fail: true

      - name: Run TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: v0.48.0

      - name: Init TFLint
        run: tflint --init

      - name: Run TFLint
        run: |
          tflint --format=json infrastructure/ > tflint-results.json || true

      - name: Run Kube-score (Kubernetes manifests)
        run: |
          curl -L https://github.com/zegl/kube-score/releases/download/v1.16.1/kube-score_1.16.1_linux_amd64.tar.gz | tar xz
          find infrastructure/kubernetes -name "*.yaml" -o -name "*.yml" | xargs ./kube-score score --output-format json > kube-score-results.json || true

      - name: Upload infrastructure scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: infrastructure-scan-results
          path: |
            tfsec.json
            checkov-results.json
            tflint-results.json
            kube-score-results.json
          retention-days: 30

  # ==========================================================================
  # JOB: COMPLIANCE SCANNING
  # ==========================================================================
  compliance-scan:
    name: Compliance & Policy Check
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == ''

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Open Policy Agent (OPA) tests
        run: |
          curl -L -o opa https://openpolicyagent.org/downloads/v0.57.0/opa_linux_amd64_static
          chmod +x opa
          ./opa test policies/ --format=json > opa-test-results.json || true

      - name: Validate against AT&T policies
        run: |
          python scripts/compliance/validate-att-policies.py \
            --input . \
            --output att-compliance-report.json

      - name: Check license compliance
        uses: fossa-contrib/fossa-action@v2
        with:
          api-key: ${{ secrets.FOSSA_API_KEY }}

      - name: GDPR compliance check
        run: |
          python scripts/compliance/gdpr-scan.py \
            --source-dir src/ \
            --output gdpr-compliance-report.json

      - name: SOX compliance validation
        run: |
          python scripts/compliance/sox-validation.py \
            --config sox-controls.yaml \
            --output sox-compliance-report.json

      - name: Upload compliance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: compliance-scan-results
          path: |
            opa-test-results.json
            att-compliance-report.json
            gdpr-compliance-report.json
            sox-compliance-report.json
          retention-days: 90 # Compliance reports kept longer

  # ==========================================================================
  # JOB: SECURITY REPORTING
  # ==========================================================================
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs:
      - secrets-scan
      - dependency-scan
      - sast-scan
      - container-scan
      - infrastructure-scan
      - compliance-scan
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all security artifacts
        uses: actions/download-artifact@v4
        with:
          path: security-reports/

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install report dependencies
        run: |
          pip install jinja2 markdown pdfkit weasyprint

      - name: Generate consolidated security report
        run: |
          python scripts/security/generate-security-report.py \
            --input security-reports/ \
            --output consolidated-security-report.json \
            --format json,html,pdf

      - name: Calculate security score
        id: security-score
        run: |
          SCORE=$(python scripts/security/calculate-security-score.py \
            --input consolidated-security-report.json)
          echo "security_score=$SCORE" >> $GITHUB_OUTPUT

      - name: Upload consolidated security report
        uses: actions/upload-artifact@v4
        with:
          name: consolidated-security-report
          path: |
            consolidated-security-report.*
          retention-days: 90

      - name: Send security report to Slack
        if: github.ref == 'refs/heads/main'
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              attachments: [{
                color: '${{ steps.security-score.outputs.security_score >= 80 && "good" || steps.security-score.outputs.security_score >= 60 && "warning" || "danger" }}',
                pretext: 'Security Scan Complete',
                fields: [{
                  title: 'Repository',
                  value: '${{ github.repository }}',
                  short: true
                }, {
                  title: 'Security Score',
                  value: '${{ steps.security-score.outputs.security_score }}/100',
                  short: true
                }, {
                  title: 'Branch',
                  value: '${{ github.ref }}',
                  short: true
                }, {
                  title: 'Commit',
                  value: '${{ github.sha }}',
                  short: true
                }]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_SECURITY_WEBHOOK }}

      - name: Create GitHub Issue for high severity findings
        if: steps.security-score.outputs.security_score < 70
        uses: actions/github-script@v7
        with:
          script: |
            const score = ${{ steps.security-score.outputs.security_score }};
            const title = `🚨 Security Score Below Threshold: ${score}/100`;
            const body = `
            ## Security Scan Results
            
            **Current Score**: ${score}/100  
            **Threshold**: 70/100
            
            **Action Required**: The security scan has identified issues that need immediate attention.
            
            ### Next Steps:
            1. Review the [security report artifacts](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            2. Address high and critical severity findings
            3. Re-run security scan after fixes
            
            **Run ID**: ${{ github.run_id }}  
            **Commit**: ${{ github.sha }}  
            **Branch**: ${{ github.ref }}
            `;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'high-priority', 'automated']
            });

  # ==========================================================================
  # JOB: SECURITY METRICS
  # ==========================================================================
  security-metrics:
    name: Update Security Metrics
    runs-on: ubuntu-latest
    needs: [security-report]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download security report
        uses: actions/download-artifact@v4
        with:
          name: consolidated-security-report

      - name: Update security metrics in Datadog
        run: |
          python scripts/metrics/update-security-metrics.py \
            --report consolidated-security-report.json \
            --datadog-api-key ${{ secrets.DATADOG_API_KEY }} \
            --datadog-app-key ${{ secrets.DATADOG_APP_KEY }}

      - name: Update security dashboard
        run: |
          python scripts/metrics/update-security-dashboard.py \
            --report consolidated-security-report.json \
            --grafana-url ${{ secrets.GRAFANA_URL }} \
            --grafana-token ${{ secrets.GRAFANA_TOKEN }}

  # ==========================================================================
  # JOB: EMERGENCY RESPONSE
  # ==========================================================================
  emergency-response:
    name: Emergency Security Response
    runs-on: ubuntu-latest
    needs: [security-report]
    if: failure() && contains(github.ref, 'main')

    steps:
      - name: Trigger emergency security alert
        uses: actions/github-script@v7
        with:
          script: |
            // Send emergency notification to security team
            const webhookUrl = '${{ secrets.EMERGENCY_SECURITY_WEBHOOK }}';
            const payload = {
              text: `🚨 EMERGENCY: Critical security issues detected in ${context.repo.repo}`,
              channel: '#security-alerts',
              username: 'GitHub Security Scanner',
              attachments: [{
                color: 'danger',
                title: 'Critical Security Alert',
                text: `Repository: ${context.repo.repo}\nBranch: ${context.ref}\nRun: ${context.runId}`,
                footer: 'AT&T CMIT DevSecOps Security',
                ts: Math.floor(Date.now() / 1000)
              }]
            };
            
            await fetch(webhookUrl, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(payload)
            });

      - name: Create high-priority incident
        run: |
          python scripts/incident/create-security-incident.py \
            --severity critical \
            --repository ${{ github.repository }} \
            --run-id ${{ github.run_id }} \
            --pagerduty-key ${{ secrets.PAGERDUTY_INTEGRATION_KEY }}

      - name: Comment PR with secrets found
        if: github.event_name == 'pull_request' && failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '🚨 **Security Alert**: Potential secrets detected in this PR. Please review the security scan results and remove any exposed credentials.'
            });

  # ==========================================================================
  # JOB: DEPENDENCY VULNERABILITY SCANNING
  # ==========================================================================
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'dependencies' || github.event.inputs.scan_type == ''

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.19.0'
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          npm ci
          pip install -r requirements.txt

      - name: Run Snyk test (Node.js)
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium --json-file-output=snyk-node-results.json
        continue-on-error: true

      - name: Run Snyk test (Python)
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium --json-file-output=snyk-python-results.json
        continue-on-error: true

      - name: Run Safety (Python)
        run: |
          pip install safety
          safety check --json --output safety-results.json || true

      - name: Run npm audit
        run: |
          npm audit --audit-level=moderate --json > npm-audit-results.json || true

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'AT&T CMIT DevSecOps'
          path: '.'
          format: 'JSON'
          out: 'dependency-check-report'
          args: >
            --enableRetired
            --enableExperimental
            --nodeAuditSkipDevDependencies
            --failOnCVSS 7

      - name: Upload dependency scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-scan-results
          path: |
            snyk-node-results.json
            snyk-python-results.json
            safety-results.json
            npm-audit-results.json
            dependency-check-report/
          retention-days: 30

  # ==========================================================================
  # JOB: STATIC APPLICATION SECURITY TESTING (SAST)
  # ==========================================================================
  sast-scan:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'code' || github.event.inputs.scan_type == ''

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, python
          config-file: ./.github/codeql/codeql-config.yml

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.19.0'
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          npm ci
          pip install -r requirements.txt

      - name: Build application
        run: npm run build

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"
          output: codeql-results
          upload: true

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: |
            p/security-audit
            p/owasp-top-ten
            p/cwe-top-25
            auto
          generateSarif: "1"

      - name: Upload Semgrep results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep.sarif

      - name: Run Bandit (Python)
        run: |
          pip install bandit
          bandit -r src/ -f json -o bandit-results.json || true

      - name: Run ESLint Security
        run: |
          npm run lint:security -- --format=json --output-file=eslint-security-results.json || true

      - name: Upload SAST results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sast-scan-results
          path: |
            codeql-results/
            semgrep.sarif
            bandit-results.json
            eslint-security-results.json
          retention-days: 30