# Docker Compose para AT&T CMIT DevSecOps - Entorno de Desarrollo
#
# Este archivo configura todos los servicios necesarios para desarrollo local
# incluyendo base de datos, cache, monitoreo y herramientas de seguridad.
#
# Uso:
#   docker-compose up -d          # Levantar todos los servicios
#   docker-compose down           # Bajar todos los servicios
#   docker-compose logs -f app    # Ver logs de la aplicaciÃ³n
#   docker-compose exec app bash  # Conectar al contenedor

version: '3.8'

# =======================================================================
# NETWORKS
# =======================================================================
networks:
  att-cmit-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =======================================================================
# VOLUMES
# =======================================================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local
  sonarqube_data:
    driver: local
  sonarqube_logs:
    driver: local
  sonarqube_extensions:
    driver: local

# =======================================================================
# SERVICES
# =======================================================================
services:
  # =====================================================================
  # APPLICATION SERVICE
  # =====================================================================
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
      target: development
    container_name: att-cmit-app
    restart: unless-stopped
    ports:
      - "3000:3000"
      - "9229:9229" # Debug port
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:password@postgres:5432/att_cmit_devsecops
      REDIS_URL: redis://redis:6379
      LOG_LEVEL: debug
      HOT_RELOAD: "true"
    volumes:
      - .:/app
      - /app/node_modules
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - att-cmit-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app.rule=Host(`localhost`)"
      - "traefik.http.services.app.loadbalancer.server.port=3000"

  # =====================================================================
  # DATABASE SERVICES
  # =====================================================================
  postgres:
    image: postgres:15-alpine
    container_name: att-cmit-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: att_cmit_devsecops
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - att-cmit-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c log_statement=all
      -c log_min_duration_statement=1000

  redis:
    image: redis:7-alpine
    container_name: att-cmit-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - att-cmit-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server /usr/local/etc/redis/redis.conf --appendonly yes

  # =====================================================================
  # MONITORING SERVICES
  # =====================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: att-cmit-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    networks:
      - att-cmit-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'

  grafana:
    image: grafana/grafana:latest
    container_name: att-cmit-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_SERVER_ROOT_URL: http://localhost:3001
      GF_INSTALL_PLUGINS: grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - att-cmit-network
    depends_on:
      - prometheus

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: att-cmit-jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      COLLECTOR_OTLP_ENABLED: "true"
    networks:
      - att-cmit-network

  # =====================================================================
  # SECURITY TOOLS
  # =====================================================================
  sonarqube:
    image: sonarqube:community
    container_name: att-cmit-sonarqube
    restart: unless-stopped
    ports:
      - "9000:9000"
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://postgres:5432/sonarqube
      SONAR_JDBC_USERNAME: postgres
      SONAR_JDBC_PASSWORD: password
      SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: "true"
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_extensions:/opt/sonarqube/extensions
    networks:
      - att-cmit-network
    depends_on:
      - postgres
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536

  owasp-zap:
    image: owasp/zap2docker-stable
    container_name: att-cmit-owasp-zap
    ports:
      - "8080:8080"
    command: zap-webswing.sh
    networks:
      - att-cmit-network
    profiles:
      - security-tools

  # =====================================================================
  # DEVELOPMENT TOOLS
  # =====================================================================
  mailhog:
    image: mailhog/mailhog
    container_name: att-cmit-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025" # SMTP
      - "8025:8025" # Web UI
    networks:
      - att-cmit-network

  adminer:
    image: adminer:latest
    container_name: att-cmit-adminer
    restart: unless-stopped
    ports:
      - "8081:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    networks:
      - att-cmit-network
    depends_on:
      - postgres

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: att-cmit-redis-commander
    restart: unless-stopped
    ports:
      - "8082:8081"
    environment:
      REDIS_HOSTS: local:redis:6379
    networks:
      - att-cmit-network
    depends_on:
      - redis

  # =====================================================================
  # MESSAGE QUEUE (for background jobs)
  # =====================================================================
  rabbitmq:
    image: rabbitmq:3-management
    container_name: att-cmit-rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
    volumes:
      - ./config/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    networks:
      - att-cmit-network
    profiles:
      - messaging

  # =====================================================================
  # NGINX REVERSE PROXY
  # =====================================================================
  nginx:
    image: nginx:alpine
    container_name: att-cmit-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./config/nginx/conf.d:/etc/nginx/conf.d
      - ./ssl:/etc/nginx/ssl
    networks:
      - att-cmit-network
    depends_on:
      - app
    profiles:
      - reverse-proxy

  # =====================================================================
  # LOG AGGREGATION
  # =====================================================================
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: att-cmit-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - ./logs/elasticsearch:/usr/share/elasticsearch/data
    networks:
      - att-cmit-network
    profiles:
      - logging

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: att-cmit-kibana
    restart: unless-stopped
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - att-cmit-network
    depends_on:
      - elasticsearch
    profiles:
      - logging

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: att-cmit-logstash
    restart: unless-stopped
    volumes:
      - ./config/logstash/pipeline:/usr/share/logstash/pipeline
      - ./config/logstash/config:/usr/share/logstash/config
      - ./logs:/logs
    ports:
      - "5044:5044"
    networks:
      - att-cmit-network
    depends_on:
      - elasticsearch
    profiles:
      - logging

  # =====================================================================
  # TESTING SERVICES
  # =====================================================================
  selenium-hub:
    image: selenium/hub:latest
    container_name: att-cmit-selenium-hub
    ports:
      - "4444:4444"
    networks:
      - att-cmit-network
    profiles:
      - testing

  selenium-chrome:
    image: selenium/node-chrome:latest
    container_name: att-cmit-selenium-chrome
    depends_on:
      - selenium-hub
    environment:
      HUB_HOST: selenium-hub
      HUB_PORT: 4444
    networks:
      - att-cmit-network
    profiles:
      - testing

  selenium-firefox:
    image: selenium/node-firefox:latest
    container_name: att-cmit-selenium-firefox
    depends_on:
      - selenium-hub
    environment:
      HUB_HOST: selenium-hub
      HUB_PORT: 4444
    networks:
      - att-cmit-network
    profiles:
      - testing

# =======================================================================
# ADDITIONAL CONFIGURATIONS
# =======================================================================

# Health check script
x-healthcheck-defaults: &healthcheck-defaults
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 30s

# Logging configuration
x-logging-defaults: &logging-defaults
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

# Resource limits
x-resource-defaults: &resource-defaults
  deploy:
    resources:
      limits:
        memory: 512M
      reservations:
        memory: 256M