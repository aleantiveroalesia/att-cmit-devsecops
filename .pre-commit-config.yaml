# Pre-commit configuration for AT&T CMIT DevSecOps
#
# Este archivo configura hooks que se ejecutan automáticamente antes de cada commit
# para mantener calidad de código y seguridad desde el primer momento.
#
# Instalación:
#   pip install pre-commit
#   pre-commit install
#
# Ejecución manual:
#   pre-commit run --all-files
#
# Documentación: https://pre-commit.com/

repos:
  # ==========================================================================
  # HOOKS BÁSICOS DE CALIDAD
  # ==========================================================================
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      # Eliminar espacios en blanco al final de líneas
      - id: trailing-whitespace
        args: [--markdown-linebreak-ext=md]

      # Asegurar que archivos terminan con nueva línea
      - id: end-of-file-fixer

      # Validar sintaxis de archivos YAML
      - id: check-yaml
        args: [--allow-multiple-documents]

      # Validar sintaxis de archivos JSON
      - id: check-json

      # Validar sintaxis de archivos TOML
      - id: check-toml

      # Validar sintaxis de archivos XML
      - id: check-xml

      # Verificar que no hay conflictos de merge
      - id: check-merge-conflict

      # Verificar que archivos ejecutables tienen shebang
      - id: check-executables-have-shebangs

      # Verificar que scripts shell tienen sintaxis válida
      - id: check-shebang-scripts-are-executable

      # Evitar commits directos a main/master
      - id: no-commit-to-branch
        args: [--branch, main, --branch, master, --branch, production]

      # Verificar que archivos grandes no se incluyan accidentalmente
      - id: check-added-large-files
        args: [--maxkb=1024]  # 1MB máximo

      # Validar nombres de archivos
      - id: check-case-conflict

      # Verificar encoding UTF-8
      - id: check-byte-order-marker

      # Verificar que no hay claves privadas
      - id: detect-private-key

  # ==========================================================================
  # SECURITY SCANNING
  # ==========================================================================

  # Detectar secretos en código
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        args:
          - '--baseline'
          - '.secrets.baseline'
          - '--exclude-files'
          - '.*\.lock$'
          - '--exclude-files'
          - '.*\.min\.js$'
        exclude: |
          (?x)^(
            .*\.lock|
            .*\.min\.js|
            package-lock\.json|
            yarn\.lock|
            Pipfile\.lock
          )$

  # Detectar credenciales de AWS
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      - id: detect-aws-credentials
        args: [--allow-missing-credentials]

  # Security linting para Python
  - repo: https://github.com/PyCQA/bandit
    rev: '1.7.5'
    hooks:
      - id: bandit
        args: ['-r', '.', '-f', 'json', '-o', 'bandit-report.json']
        exclude: |
          (?x)^(
            tests/.*|
            test_.*\.py|
            .*_test\.py
          )$

  # ==========================================================================
  # CODE FORMATTING Y LINTING
  # ==========================================================================

  # JavaScript/TypeScript - ESLint
  - repo: https://github.com/pre-commit/mirrors-eslint
    rev: v8.57.0
    hooks:
      - id: eslint
        files: \.(js|jsx|ts|tsx)$
        additional_dependencies:
          - eslint@8.57.0
          - '@typescript-eslint/eslint-plugin@6.21.0'
          - '@typescript-eslint/parser@6.21.0'
          - eslint-plugin-security@1.7.1
          - eslint-plugin-import@2.29.1

  # JavaScript/TypeScript - Prettier
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v3.1.0
    hooks:
      - id: prettier
        files: \.(js|jsx|ts|tsx|json|css|scss|md|yaml|yml)$
        args: [--write]

  # Python - Black formatter
  - repo: https://github.com/psf/black
    rev: 23.12.1
    hooks:
      - id: black
        language_version: python3
        args: [--line-length=88]

  # Python - isort (import sorting)
  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        args: [--profile=black, --multi-line=3]

  # Python - flake8 linting
  - repo: https://github.com/pycqa/flake8
    rev: 7.0.0
    hooks:
      - id: flake8
        args: [--max-line-length=88, --extend-ignore=E203,W503]
        additional_dependencies:
          - flake8-security==1.7.1
          - flake8-bandit==4.1.1
          - flake8-bugbear==23.12.2

  # Python - mypy type checking
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.8.0
    hooks:
      - id: mypy
        additional_dependencies: [types-all]
        exclude: |
          (?x)^(
            tests/.*|
            migrations/.*
          )$

  # ==========================================================================
  # INFRASTRUCTURE AS CODE
  # ==========================================================================

  # Terraform formatting
  - repo: https://github.com/antonbabenko/pre-commit-terraform
    rev: v1.86.0
    hooks:
      - id: terraform_fmt
      - id: terraform_validate
      - id: terraform_docs
        args:
          - --hook-config=--path-to-file=README.md
          - --hook-config=--add-to-existing-file=true
          - --hook-config=--create-file-if-not-exist=true
      - id: terraform_tflint
        args:
          - --args=--config=__GIT_WORKING_DIR__/.tflint.hcl

  # Terraform security scanning con tfsec
  - repo: https://github.com/aquasecurity/tfsec
    rev: v1.28.5
    hooks:
      - id: tfsec
        args:
          - --format=json
          - --out=tfsec-report.json

  # Terraform security con Checkov
  - repo: https://github.com/bridgecrewio/checkov
    rev: 3.1.34
    hooks:
      - id: checkov
        args: [--framework=terraform, --output=json, --output-file=checkov-report.json]

  # ==========================================================================
  # DOCKER Y CONTAINERS
  # ==========================================================================

  # Dockerfile linting con hadolint
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        args: [--format=json, --output=/dev/stdout]

  # ==========================================================================
  # KUBERNETES
  # ==========================================================================

  # Kubernetes YAML validation
  - repo: https://github.com/instrumenta/kubeval
    rev: v0.16.1
    hooks:
      - id: kubeval
        files: .*\.(yaml|yml)$
        args: [--ignore-missing-schemas]

  # ==========================================================================
  # DOCUMENTATION
  # ==========================================================================

  # Markdown linting
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.38.0
    hooks:
      - id: markdownlint
        args: [--fix]
        exclude: |
          (?x)^(
            CHANGELOG\.md|
            \.github/.*\.md
          )$

  # ==========================================================================
  # DEPENDENCIES Y VULNERABILITIES
  # ==========================================================================

  # Safety - Python package vulnerability checking
  - repo: https://github.com/Lucas-C/pre-commit-hooks-safety
    rev: v1.3.2
    hooks:
      - id: python-safety-dependencies-check
        args: [--json, --output=safety-report.json]

  # ==========================================================================
  # CUSTOM HOOKS ESPECÍFICOS DE AT&T
  # ==========================================================================

  # Hook personalizado para validar headers de AT&T
  - repo: local
    hooks:
      - id: att-license-header
        name: Check AT&T License Headers
        entry: scripts/check-license-headers.sh
        language: script
        files: \.(py|js|ts|java|go)$
        pass_filenames: true

      # Validar convenciones de naming de AT&T
      - id: att-naming-conventions
        name: AT&T Naming Conventions
        entry: scripts/validate-naming.py
        language: python
        files: \.(py|js|ts)$
        pass_filenames: true

      # Verificar compliance con políticas de AT&T
      - id: att-compliance-check
        name: AT&T Compliance Check
        entry: scripts/compliance-check.sh
        language: script
        always_run: true
        pass_filenames: false

      # Validar que archivos de configuración no contienen datos sensibles
      - id: sensitive-data-check
        name: Sensitive Data Check
        entry: scripts/sensitive-data-scan.py
        language: python
        files: \.(json|yaml|yml|env|conf|config)$
        pass_filenames: true

# =============================================================================
# CONFIGURACIÓN GLOBAL
# =============================================================================

# Configuración por defecto para todos los hooks
default_language_version:
  python: python3.11
  node: '18.19.0'

# Configuración de stages
default_stages: [commit, push]

# Exclusiones globales
exclude: |
  (?x)^(
    \.git/.*|
    \.vscode/.*|
    \.idea/.*|
    node_modules/.*|
    \.next/.*|
    build/.*|
    dist/.*|
    .*\.min\.(js|css)|
    .*\.lock|
    .*\.generated\.*
  )$

# Configuración de CI
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit hooks
    
    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: [terraform_docs, terraform_tflint, tfsec, checkov]
  submodules: false